name: github
display_name: Github
type: function
subtype: kit
description: A function to perform actions on Github.
configuration:
  - name: github_repository
    display_name: Repository
    description: Github repository name
    required: true
  - name: github_app_id
    display_name: App ID
    description: Github app id
    required: true
  - name: github_app_private_key
    display_name: Private Key
    description: Github app private key
    type: textarea
    secret: true
    required: true
kit:
  - name: get_issues
    description: |
      This tool will fetch a list of the repository's issues. It will return the title, and issue
      number of 5 issues. It takes no input.
    parameters:
      - name: no_input
        type: string
        description: No input required, e.g. `` (empty string).
        required: false
  - name: get_issue
    description: |
      This tool will fetch the title, body, and comment thread of a specific issue. **VERY IMPORTANT**:
      You must specify the issue number as an integer.
    parameters:
      - name: issue_number
        type: integer
        description: Issue number as an integer, e.g. `42`
        required: true
  - name: comment_on_issue
    description: |
      This tool is useful when you need to comment on a GitHub issue. Simply pass in the issue number
      and the comment you would like to make. Please use this sparingly as we don't want to clutter
      the comment threads. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:

      - First you must specify the issue number as an integer
      - Then you must place two newlines
      - Then you must specify your comment
    parameters:
      - name: input
        type: string
        description: Follow the required formatting.
        required: true
  - name: get_pull_request
    description: |
      This tool will fetch the title, body, comment thread and commit history of a specific Pull
      Request (by PR number). **VERY IMPORTANT**: You must specify the PR number as an integer.
    parameters:
      - name: pr_number
        type: integer
        description: The PR number as an integer, e.g. `12`
        required: true
  - name: create_pull_request
    description: |
      This tool is useful when you need to create a new pull request in a GitHub repository.
      **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:

      - First you must specify the title of the pull request
      - Then you must place two newlines
      - Then you must write the body or description of the pull request

      When appropriate, always reference relevant issues in the body by using the syntax
      `closes #<issue_number` like `closes #3, closes #6`.
    parameters:
      - name: formatted_pr
        type: string
        description: Follow the required formatting.
        required: true
  - name: create_file
    description: |
      This tool is a wrapper for the GitHub API, useful when you need to create a file in a GitHub
      repository. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:

      - First you must specify which file to create by passing a full file path (**IMPORTANT**: the
        path must not start with a slash)
      - Then you must specify the contents of the file
    parameters:
      - name: formatted_file
        type: string
        description: Follow the required formatting.
        required: true
  - name: read_file
    description: |
      This tool is a wrapper for the GitHub API, useful when you need to read the contents of a file.
      Simply pass in the full file path of the file you would like to read. **IMPORTANT**: the path
      must not start with a slash
    parameters:
      - name: formatted_filepath
        type: string
        description: The full file path of the file you would like to read where the path must NOT start with a slash, e.g. `some_dir/my_file.py`.
        required: true
  - name: update_file
    description: |
      This tool is a wrapper for the GitHub API, useful when you need to update the contents of a file in a GitHub repository. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:

      - First you must specify which file to modify by passing a full file path (**IMPORTANT**: the path must not start with a slash)
      - Then you must specify the old contents which you would like to replace wrapped in OLD <<<< and >>>> OLD
      - Then you must specify the new contents which you would like to replace the old contents with wrapped in NEW <<<< and >>>> NEW
    parameters:
      - name: formatted_file_update
        type: string
        description: Strictly follow the provided rules.
        required: true
  - name: delete_file
    description: |
      This tool is a wrapper for the GitHub API, useful when you need to delete a file in a GitHub
      repository. Simply pass in the full file path of the file you would like to delete.
      **IMPORTANT**: the path must not start with a slash
    parameters:
      - name: formatted_filepath
        type: string
        description: |
          The full file path of the file you would like to delete where the path must NOT start
          with a slash, e.g. `some_dir/my_file.py`.
        required: true
  - name: get_files_from_directory
    description: |
      This tool will fetch a list of all files in a specified directory. **VERY IMPORTANT**: You must
      specify the path of the directory as a string input parameter.
    parameters:
      - name: input
        type: string
        description: The path of the directory, e.g. `some_dir/inner_dir`.
        required: false
  - name: set_active_branch
    description: |
      This tool will set the active branch in the repository, similar to `git checkout <branch_name>`
      and `git switch -c <branch_name>`. **VERY IMPORTANT**: You must specify the name of the branch
      as a string input parameter.
    parameters:
      - name: branch_name
        type: string
        description: The name of the branch, e.g. `my_branch`.
        required: true
  - name: search_code
    description: |
      This tool will search for code in the repository. **VERY IMPORTANT**: You must specify the
      search query as a string input parameter.
    parameters:
      - name: search_query
        type: string
        description: A keyword-focused natural language search query for code, e.g. `MyFunctionName()`.
        required: true
  - name: create_review_request
    description: |
      This tool will create a review request on the open pull request that matches the current active
      branch. **VERY IMPORTANT**: You must specify the username of the person who is being requested
      as a string input parameter.
    parameters:
      - name: username
        type: string
        description: GitHub username of the user being requested, e.g. `my_username`.
        required: true
  - name: search_issues_and_prs
    description: |
      This tool will search for issues and pull requests in the repository. **VERY IMPORTANT**: You
      must specify the search query as a string input parameter.
    parameters:
      - name: search_query
        type: string
        description: Natural language search query, e.g. `My issue title or topic`.
        required: true
  - name: list_open_pull_requests
    description: |
      This tool will fetch a list of the repository's Pull Requests (PRs). It will return the title,
      and PR number of 5 PRs. It takes no input.
    parameters:
      - name: no_input
        type: string
        description: No input required, e.g. `` (empty string).
        required: false
  - name: list_pull_request_files
    description: |
      This tool will fetch the full text of all files in a pull request (PR) given the PR number as
      an input. This is useful for understanding the code changes in a PR or contributing to it.
      **VERY IMPORTANT**: You must specify the PR number as an integer input parameter.
    parameters:
      - name: pr_number
        type: integer
        description: The PR number as an integer, e.g. `12`
        required: true
  - name: list_files_in_main_branch
    description: |
      This tool will provide an overview of all existing files in the main branch of the repository.
      It will list the file names, their respective paths, and a brief summary of their contents.
      This can be useful for understanding the structure and content of the repository, especially
      when navigating through large codebases. No input parameters are required.
    parameters:
      - name: no_input
        type: string
        description: No input required, e.g. `` (empty string).
        required: false
  - name: list_files_in_bot_branch
    description: |
      This tool will provide an overview of all files in your current working branch where you should
      implement changes. This is great for getting a high level overview of the structure of your
      code. No input parameters are required.
    parameters:
      - name: no_input
        type: string
        description: No input required, e.g. `` (empty string).
        required: false
  - name: list_branches_in_repo
    description: |
      This tool will fetch a list of all branches in the repository. It will return the name of each
      branch. No input parameters are required.
    parameters:
      - name: no_input
        type: string
        description: No input required, e.g. `` (empty string).
        required: false
  - name: create_branch
    description: |
      This tool will create a new branch in the repository. **VERY IMPORTANT**: You must specify the
      name of the new branch as a string input parameter.
    parameters:
      - name: branch_name
        type: string
        description: The name of the branch, e.g. `my_branch`.
        required: true
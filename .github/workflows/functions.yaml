name: Functions

on:
  push:
    branches: ["main"]
    paths:
      - "src/functions/**"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: diff
        uses: tj-actions/changed-files@v41
        with:
          files: src/functions/**
          dir_names: true
      - name: Generate functions matrix
        uses: actions/github-script@v7
        id: generator
        env:
          ALL_CHANGED_FILES: ${{ steps.diff.outputs.all_changed_files }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const method = "${{ github.event_name }}"
            if (method === "workflow_dispatch" || process.env.ALL_CHANGED_FILES === 'src/functions') {
              const fs = require('fs');
              const path = require('path');
              const functionsPath = path.join(process.cwd(), 'src', 'functions');
              const functions = fs.readdirSync(functionsPath)
                            .filter(file => fs.statSync(path.join(functionsPath, file)).isDirectory());
              return { functions };
            }
            const all_changed_files = process.env.ALL_CHANGED_FILES.split(" ")
            const functionSet = new Set(all_changed_files.filter(file => file.includes("src/functions/")).map(file => file.split("/")[2]))
            const uniqueFunctionsArray = [...functionSet]

            return uniqueFunctionsArray.length ? { functions: uniqueFunctionsArray } : null
    outputs:
      matrix: ${{ steps.generator.outputs.result }}

  build-function:
    if: ${{ fromJson(needs.gen-matrix.outputs.matrix) }}
    needs: gen-matrix
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.gen-matrix.outputs.matrix) }}
    steps:
      - name: Get short node version
        uses: actions/github-script@v7
        id: logger
        with:
          script: |
            console.log("${{ matrix.functions }}")
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          file: ./src/functions/Dockerfile
          tags: ghcr.io/${{ github.repository_owner }}/functions/${{ matrix.functions }}:latest
          build-args: |
            FUNCTION=${{ matrix.functions }}

  push-function:
    if: ${{ fromJson(needs.gen-matrix.outputs.matrix) }}
    needs:
      - build-function
      - gen-matrix
    name: push-function
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.gen-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
      - name: Install dependencies
        run: |
          pip install uv
          cp src/functions/${{ matrix.functions }}/pyproject.toml .
          uv sync
      - name: Push function
        env:
          STORE_URL: ${{ vars.STORE_URL }}
          ADMIN_USERNAME: ${{ secrets.STORE_ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.STORE_ADMIN_PASSWORD }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/functions/${{ matrix.functions }}:latest
          PACKAGE_TYPE: functions
          PACKAGE_NAME: ${{ matrix.functions }}
        run: |
          . .venv/bin/activate
          python scripts/push_to_store.py
